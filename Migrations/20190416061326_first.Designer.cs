// <auto-generated />
using System;
using Dotnet_Flix.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dotnet_Flix.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190416061326_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dotnet_Flix.Models.Check_out", b =>
                {
                    b.Property<int>("Check_outId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<int>("UserId");

                    b.HasKey("Check_outId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Check_outes");
                });

            modelBuilder.Entity("Dotnet_Flix.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Genre")
                        .IsRequired();

                    b.Property<DateTime>("Released");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("MovieId");

                    b.ToTable("Moviees");
                });

            modelBuilder.Entity("Dotnet_Flix.Models.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<int>("UserId");

                    b.Property<int>("rate");

                    b.HasKey("RateId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratees");
                });

            modelBuilder.Entity("Dotnet_Flix.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("UserId");

                    b.ToTable("Useres");
                });

            modelBuilder.Entity("Dotnet_Flix.Models.Check_out", b =>
                {
                    b.HasOne("Dotnet_Flix.Models.Movie", "Movie")
                        .WithMany("check_person")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dotnet_Flix.Models.User", "User")
                        .WithMany("MoviesInHand")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dotnet_Flix.Models.Rate", b =>
                {
                    b.HasOne("Dotnet_Flix.Models.Movie", "Movie")
                        .WithMany("Rates")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dotnet_Flix.Models.User", "User")
                        .WithMany("WatchedMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
